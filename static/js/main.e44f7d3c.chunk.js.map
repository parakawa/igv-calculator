{"version":3,"sources":["components/navbar.jsx","components/letterAmount.jsx","components/calculator.jsx","enums.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","className","Component","LetterAmount","Calculator","Form","htmlFor","type","inputMode","pattern","onKeyPress","this","isDecimal","value","props","calculatorData","subtotal","onChange","onChangeSubtotal","igv","disabled","inputmode","total","onChangeTotal","Button","onClick","newOperation","evt","IGV","App","event","parseFloat","target","setState","twoDecimals","console","log","bind","num","Math","round","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAmBeA,G,iNAhBXC,MAAQ,G,wEAEJ,OACI,yBAAKC,UAAU,e,GAJNC,c,gBCWNC,E,2MAVXH,MAAQ,G,wEAEJ,OACI,yBAAKC,UAAU,iCAAf,QACU,4B,GALKC,aCsDZE,E,iLAlDP,OACI,kBAACC,EAAA,EAAD,CAAMJ,UAAU,cACZ,yBAAKA,UAAU,cACX,2BAAOK,QAAQ,GAAGL,UAAU,cAA5B,YACA,2BACIM,KAAK,SACLC,UAAU,UACVC,QAAQ,SACRR,UAAU,eACVS,WAAYC,KAAKC,UACjBC,MAAOF,KAAKG,MAAMC,eAAeC,SACjCC,SAAUN,KAAKG,MAAMI,oBAE7B,yBAAKjB,UAAU,cACX,2BAAOK,QAAQ,GAAGL,UAAU,cAA5B,aACA,2BAAOM,KAAK,OAAOM,MAAOF,KAAKG,MAAMC,eAAeI,IAAKlB,UAAU,eAAemB,UAAQ,KAE9F,yBAAKnB,UAAU,cACX,2BAAOK,QAAQ,GAAGL,UAAU,cAA5B,SACA,2BACIM,KAAK,OACLN,UAAU,eACVoB,UAAU,UACVZ,QAAQ,SACRI,MAAOF,KAAKG,MAAMC,eAAeO,MACjCL,SAAUN,KAAKG,MAAMS,iBAG7B,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQjB,KAAK,SAASkB,QAASd,KAAKG,MAAMY,cAA1C,yB,gCAMFC,Q,GArCWzB,aCJZ0B,EAAM,ICqEJC,E,YAvDd,aAAc,IAAD,8BACZ,+CARD7B,MAAQ,CACPe,eAAgB,CACfC,SAAU,GACVG,IAAK,GACLG,MAAO,KAGI,EAkBbJ,iBAAmB,SAACY,GACnB,IAAMd,EAAWe,WAAWD,EAAME,OAAOnB,OACzC,EAAKoB,SAAS,CACblB,eAAgB,CACfC,SAAUA,EACVG,IAAK,EAAKe,YAAalB,EAAWY,GAClCN,MAAO,EAAKY,YAAalB,GAAY,EAAIY,OAG3CO,QAAQC,IAAI,SAAUN,EAAME,OAAOnB,QA3BvB,EA6BbU,cAAgB,SAACO,GAChB,IAAMR,EAAQS,WAAWD,EAAME,OAAOnB,OACtC,EAAKoB,SAAS,CACblB,eAAgB,CACfC,SAAU,EAAKkB,YAAYZ,GAAU,EAAIM,IACzCT,IAAK,EAAKe,YAAYZ,GAAU,EAAIM,GAAQA,GAC5CN,MAAOA,KAGTa,QAAQC,IAAI,SAAUN,EAAME,OAAOnB,QApCnCsB,QAAQC,IAAI,mBACZ,EAAKV,aAAe,EAAKA,aAAaW,KAAlB,gBAHR,E,sEAMZ,OACA,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,CACCtB,eAAgBJ,KAAKX,MAAMe,eAC3BG,iBAAkBP,KAAKO,iBACvBK,cAAeZ,KAAKY,cACpBG,aAAcf,KAAKe,kB,qCA4BrBf,KAAKsB,SAAS,CACblB,eAAgB,CACfC,SAAU,GACVG,IAAK,GACLG,MAAO,MAGTa,QAAQC,IAAI,a,kCAEDE,GACX,OAAQC,KAAKC,MAAY,IAANF,GAAa,KAAKG,QAAQ,O,GA3D7BvC,aCMEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e44f7d3c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n//import { Nav, Button } from \"react-bootstrap\";\r\nclass NavBar extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <nav className='navbar'></nav>\r\n            // <Nav variant=\"tabs\" defaultActiveKey=\"/home\">\r\n            //     <Nav.Item>\r\n            //         <Nav.Link>Active</Nav.Link>\r\n            //     </Nav.Item>\r\n            //     <Nav.Item>\r\n            //         <Nav.Link eventKey=\"link-1\">Option 2</Nav.Link>\r\n            //     </Nav.Item>\r\n            // </Nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react'\r\n\r\nclass LetterAmount extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (  \r\n            <div className='letterAmount text-center pt-2'>\r\n                Son: {'Vente y 00/100 soles'}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LetterAmount;","import React, { Component } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport LetterAmount from './letterAmount'\r\n\r\nclass Calculator extends Component {\r\n    render() { \r\n        return ( \r\n            <Form className='calculator'>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"\" className=\"form-label\">Subtotal</label>\r\n                    <input \r\n                        type='number' \r\n                        inputMode=\"numeric\" \r\n                        pattern=\"[0-9]*\" \r\n                        className=\"form-control\"  \r\n                        onKeyPress={this.isDecimal} \r\n                        value={this.props.calculatorData.subtotal} \r\n                        onChange={this.props.onChangeSubtotal}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"\" className=\"form-label\">IGV (18%)</label>\r\n                    <input type=\"text\" value={this.props.calculatorData.igv} className=\"form-control\" disabled/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"\" className=\"form-label\">Total</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        inputmode=\"numeric\" \r\n                        pattern=\"[0-9]*\"                        \r\n                        value={this.props.calculatorData.total} \r\n                        onChange={this.props.onChangeTotal}\r\n                        />\r\n                </div>\r\n                <LetterAmount/>\r\n                <Button type='submit' onClick={this.props.newOperation} >\r\n                    Nueva operaci√≥n\r\n                </Button>\r\n            </Form>\r\n        );\r\n    };\r\n    isDecimal(evt) {\r\n        // console.log('evt', evt.target.value);\r\n        // console.log('which', evt.target.which)\r\n        // if ((evt.which !== 46 || evt.value.indexOf('.') !== -1) && (evt.which < 48 || evt.which > 57)) {\r\n        //     //event it's fine\r\n    \r\n        // }\r\n        // var input = evt.value;\r\n        // if ((input.indexOf('.') !== -1) && (input.substring(input.indexOf('.')).length > 2)) {\r\n        //     return false;\r\n        // }\r\n    }\r\n\r\n}\r\n\r\nexport default Calculator;","export const IGV = 0.18","import React, {Component} from 'react';\nimport './App.css';\nimport NavBar from './components/navbar'\nimport Calculator from './components/calculator'\nimport { IGV } from './enums'\n\nclass App extends Component {\n\tstate = { \n\t\tcalculatorData: {\n\t\t\tsubtotal: '',\n\t\t\tigv: '',\n\t\t\ttotal: ''\n\t\t}\n\t}\n\tconstructor(){\n\t\tsuper();\n\t\tconsole.log('constructor-app')\n\t\tthis.newOperation = this.newOperation.bind(this)\n\t}\n\trender() { \n\t\treturn ( \n\t\t<div>\n\t\t\t<NavBar/>\n\t\t\t<Calculator \n\t\t\t\tcalculatorData={this.state.calculatorData}\n\t\t\t\tonChangeSubtotal={this.onChangeSubtotal}\n\t\t\t\tonChangeTotal={this.onChangeTotal}\n\t\t\t\tnewOperation={this.newOperation}\n\t\t\t\t/>\n\t\t</div>\n\t\t);\n\t}\n\tonChangeSubtotal = (event) => {\n\t\tconst subtotal = parseFloat(event.target.value)\n\t\tthis.setState({\n\t\t\tcalculatorData: {\n\t\t\t\tsubtotal: subtotal,\n\t\t\t\tigv: this.twoDecimals( subtotal * IGV ),\n\t\t\t\ttotal: this.twoDecimals( subtotal * (1 + IGV) )\n\t\t\t}\n\t\t})\n\t\tconsole.log('evtent', event.target.value)\n\t}\n\tonChangeTotal = (event) => {\n\t\tconst total = parseFloat(event.target.value)\n\t\tthis.setState({\n\t\t\tcalculatorData: {\n\t\t\t\tsubtotal: this.twoDecimals(total / ( 1 + IGV)),\n\t\t\t\tigv: this.twoDecimals(total / ( 1 + IGV ) * IGV),\n\t\t\t\ttotal: total\n\t\t\t}\n\t\t})\n\t\tconsole.log('evtent', event.target.value)\n\t}\t\n\tnewOperation() {\n\t\tthis.setState({\n\t\t\tcalculatorData: {\n\t\t\t\tsubtotal: '',\n\t\t\t\tigv: '',\n\t\t\t\ttotal: ''\n\t\t\t}\n\t\t})\n\t\tconsole.log('bkdsajk')\n\t}\n\ttwoDecimals(num) {\n\t\treturn (Math.round(num * 100) / 100).toFixed(2);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}